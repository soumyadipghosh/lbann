////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the LBANN Research Team (B. Van Essen, et al.) listed in
// the CONTRIBUTORS file. <lbann-dev@llnl.gov>
//
// LLNL-CODE-697807.
// All rights reserved.
//
// This file is part of LBANN: Livermore Big Artificial Neural Network
// Toolkit. For details, see http://software.llnl.gov/LBANN or
// https://github.com/LLNL/LBANN.
//
// Licensed under the Apache License, Version 2.0 (the "Licensee"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the license.
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

import "google/protobuf/any.proto";

package lbann_data;

// A message describing a training algorithm.
message TrainingAlgorithm {
  // Human-decided name. Just for output/user reference.
  string name = 1;

  // This is a message containing the parameters needed to construct a
  // solver. The actual message type must be registered with LBANN's
  // factory. The onus is on the user to ensure the parameters
  // provided are consistent with the algorithm they have selected.
  google.protobuf.Any parameters = 2;
}

// Is-a TrainingAlgorithm
message SGD {
  message TerminationCriteria {
    oneof criterion {
      uint64 max_batches = 1;
      uint64 max_epochs = 2;
      double max_seconds = 3;
    }
  }

  TerminationCriteria stopping_criteria = 1;
}// message SGD

// Is-a TrainingAlgorithm
message LTFB {
  message TerminationCriteria {
    uint64 max_tournaments = 1;
  }

  TrainingAlgorithm local_training_algorithm = 1;
  google.protobuf.Any meta_learning_strategy = 2;
  TerminationCriteria stopping_criteria = 3;
}// message LTFB

message MutationStrategy {
  message NullMutation {
  }

  message ReplaceActivation {
    string old_layer_type = 1;
    string new_layer_type = 2;
  }

  message ReplaceLearnable {
  }

  message InsertConv {
  }

  message ReplaceKernelConv {
  }

  oneof strategy {
    NullMutation null_mutation = 1;
    ReplaceActivation replace_activation = 2;
    ReplaceLearnable replace_learnable = 3;
    InsertConv insert_conv = 4;
    ReplaceKernelConv replace_kernel_conv = 5;
  }
} //message Mutation Strategy

// The classic LTFB algorithm. Implements MetaLearningStrategy.
message RandomPairwiseExchange {
  enum MetricStrategy {
    LOWER_IS_BETTER = 0;
    HIGHER_IS_BETTER = 1;
  }

  map<string, MetricStrategy> metric_name_strategy_map = 1;
  ExchangeStrategy exchange_strategy = 2;
  MutationStrategy mutation_strategy = 3;

  // This uses the "oneof" strategy because we don't really want
  // downstreams adding strategies willy nilly.
  message ExchangeStrategy {
    message SendRecvWeights {
      bool exchange_hyperparameters = 1;
    }
    message CheckpointBinary {
      // No extra params
    }
    message CheckpointFile {
      string base_dir = 1;
    }

    repeated string weights_name = 1;
    oneof strategy {
      SendRecvWeights sendrecv_weights = 2;
      CheckpointBinary checkpoint_binary = 3;
      CheckpointFile checkpoint_file = 4;
    }
  }// message ExchangeStrategy
}// message RandomPairwiseExchange

message KFAC {

  SGD sgd = 1;

  // Space-separated pairs of the initial and the target damping value.
  // If only one value is specified, it will be used throughout training.
  // default: "callback::kfac::damping_0_default"
  string damping_act = 2;
  string damping_err = 3;
  string damping_bn_act = 4;
  string damping_bn_err = 5;

  uint64 damping_warmup_steps = 6; // default: damping_warmup_steps_default
  double kronecker_decay = 7; // default: callback::kfac::kronecker_decay_default

  bool print_time = 8; // default: false
  bool print_matrix = 9; // default: false
  bool print_matrix_summary = 10; // default: false

  bool use_pi = 11; // default: false

  // Space-separated pairs of the initial and the target update intervals.
  // If only one value is specified, it will be used throughout training.
  string update_intervals = 12; // default: "1"
  uint64 update_interval_steps = 13; // default: 0

  string inverse_strategy = 14; // Options: all, each, root (default: all)

  string disable_layers = 15; // List of layers to be ignored by the callback

  float learning_rate_factor = 16; // Factor to be multiplied to the learning rate
  // Factor to be multiplied to the learning rate for GRU layers
  // (default: learning_rate_factor)
  float learning_rate_factor_gru = 17;

}//message KFAC
